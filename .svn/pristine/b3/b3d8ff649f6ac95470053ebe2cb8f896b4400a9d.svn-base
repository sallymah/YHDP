package tw.com.hyweb.svc.yhdp.batch.impfiles.ChangeLocalPath;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import tw.com.hyweb.core.cp.batch.framework.generic.BatchJob;
import tw.com.hyweb.core.cp.batch.framework.generic.BatchJobException;

public class ChangeLocalPathJob implements BatchJob {
	
	private static final Logger logger = Logger.getLogger(ChangeLocalPathJob.class);
	
	private static final String NEW_FLAG = "N";
	
	private final Map<String, String> resultMap;
	private final List filenameBeans;

	public ChangeLocalPathJob(Map<String, String> resultMap, List filenameBeans) {
		this.resultMap = resultMap;
		this.filenameBeans = filenameBeans;
	}

	@Override
	public void action(Connection connection, String batchDate) throws Exception {
		// TODO Auto-generated method stub
		for(int i = 0; i < filenameBeans.size(); i++) {
			
			FilenameBean filenameBean = (FilenameBean)filenameBeans.get(i);
			//檔名邏輯比對需處理邏輯
			if(resultMap.get("FULL_FILE_NAME").toString().matches(filenameBean.getFileNamePattern())) {
				
				String localPath = arrangeFile(resultMap.get("LOCAL_PATH").toString());
				File file = new File(localPath + resultMap.get("FULL_FILE_NAME").toString());
				
				if(file.exists()) {
					
					BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "Big5"));
					String oneLine;
					while((oneLine = br.readLine()) != null) {
						//取第一行
						//3.4 聯名卡記名註記檔 檔案介面	請輸入N(表示20180808)
						if(NEW_FLAG.equals(oneLine.substring(18,19))) {
							
							String changeFolder = arrangeFile(localPath.replace(filenameBean.getFileName(), filenameBean.getChangeFileName()));
							File changeFile = new File(changeFolder);
							
							if (!changeFile.exists()) {
								changeFile.mkdirs();
			                }
							logger.debug(changeFolder);
							//移動檔案至新介面資料夾
							logger.debug(file.renameTo(new File(changeFolder + resultMap.get("FULL_FILE_NAME").toString())));
							//update ftp log
						}
					}
				}
				else {
					logger.warn("[" + arrangeFile(resultMap.get("LOCAL_PATH").toString()) + resultMap.get("FULL_FILE_NAME").toString() + "] does not exist.");
				}
				break;
			}
		}
	}
	
	public static String arrangeFile(String file){
		
		String[] fileWord = file.split("[\\\\/]");
		String arrangefile = "";
		if (fileWord.length < 1 ){
			arrangefile = "/";
		}
		else{
			for (int i= 0; i < fileWord.length; i++){
				if (fileWord[i].length()>0 || i == 0){
					arrangefile = arrangefile + fileWord[i] + "/";
				}
			}
		}
		
		return arrangefile;
	}

	@Override
	public void remarkFailure(Connection connection, String batchDate, BatchJobException ex) throws Exception {
		// TODO Auto-generated method stub
	}

	@Override
	public void remarkSuccess(Connection connection, String batchDate) throws Exception {
		// TODO Auto-generated method stub
	}
	
}
