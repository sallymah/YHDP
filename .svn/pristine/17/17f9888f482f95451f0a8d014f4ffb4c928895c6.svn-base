package tw.com.hyweb.svc.yhdp.batch.impfiles.ImpBMEM;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import tw.com.hyweb.core.cp.batch.util.DateUtils;
import tw.com.hyweb.core.cp.common.misc.DateUtil;
import tw.com.hyweb.service.db.info.TbCardInfo;
import tw.com.hyweb.service.db.info.TbCardUptInfo;
import tw.com.hyweb.service.db.info.TbCustInfo;
import tw.com.hyweb.service.db.info.TbCustUptInfo;
import tw.com.hyweb.service.db.info.TbHgCardMapInfo;
import tw.com.hyweb.service.db.info.TbSysConfigInfo;
import tw.com.hyweb.service.db.mgr.TbCardMgr;
import tw.com.hyweb.service.db.mgr.TbCustMgr;
import tw.com.hyweb.service.db.mgr.TbSysConfigMgr;
import tw.com.hyweb.util.BatchUtils;
import tw.com.hyweb.util.DbUtil;
import tw.com.hyweb.util.ReleaseResource;
import tw.com.hyweb.util.string.StringUtil;

public class BmemData {

	private static Logger log = Logger.getLogger(BmemData.class);

	private final String sysDate = DateUtils.getSystemDate();
	private String sysTime;
	private String sysTimeMs;

	private String _is_cust_encript = "0"; // TB_CUST是否要作加解密 1:是 / 0:否
	private String _is_expiry_date_flag = "0";
	private String batchDate = "";

	private Integer cardCnt;

	private BmemDataBean dataBean = new BmemDataBean();

	public BmemData() {
	}

	public BmemDataBean getDataBean() {
		return dataBean;
	}

	public Integer getCardCnt() {
		return cardCnt;
	}

	/**
	 * Configuration parameters
	 * 
	 * @param conn
	 * @param map
	 * @throws Exception
	 */
	public void setData(Connection conn, String batchDate, Map<String, Object> map)
			throws Exception {
		this.batchDate = batchDate;
		this._is_cust_encript = this.getSysConfigValue(conn, "IS_CUST_ENCRIPT");
		this._is_expiry_date_flag = this.getExpiryDateFlag(conn,
				map.get("CARD_NO").toString());
		this.cardCnt = this.getTbCardCnt(conn, map.get("CARD_NO").toString());
		dataBean.setCustId(this
				.getCustId(conn, map.get("PERSON_ID").toString()));
	}

	/**
	 * Conversion data to JavaBean
	 * 
	 * @param map
	 *            Import data
	 * @throws Exception
	 */
	public void convertBeanFromMap(Map<String, Object> map) throws Exception {
		dataBean.setCardNo(map.get("CARD_NO").toString());
		dataBean.setStatus(map.get("STATUS").toString());
		dataBean.setLocName(map.get("LOC_NAME").toString());
		dataBean.setPersonId(map.get("PERSON_ID").toString());
		dataBean.setGender(map.get("GENDER").toString());
		dataBean.setBirthday(map.get("BIRTHDAY").toString());
		dataBean.setCity(map.get("CITY").toString());
		dataBean.setZipCode(this.formatZipCode(map.get("ZIP_CODE").toString()));
		dataBean.setAddress(map.get("ADDRESS").toString());
		dataBean.setTelHome(map.get("TEL_HOME").toString());
		dataBean.setMobile(map.get("MOBILE").toString());
		dataBean.setEmail(map.get("EMAIL").toString());
		dataBean.setDmFlag(map.get("DM_FLAG").toString());
		dataBean.setLegalAgentName(map.get("LEGAL_AGENT_NAME").toString());
		dataBean.setLegalAgentPid(map.get("LEGAL_AGENT_PID").toString());
		dataBean.setLegalAgentMobile(map.get("LEGAL_AGENT_MOBILE").toString());
		dataBean.setLegalAgentPhone(map.get("LEGAL_AGENT_PHONE").toString());
		dataBean.setVipFlag(map.get("VIP_FLAG").toString());
		dataBean.setIssueDate(map.get("ISSUE_DATE").toString());
		dataBean.setExpiryDate(map.get("EXPIRY_DATE").toString());
		dataBean.setMerchId(map.get("MERCH_ID").toString());
		dataBean.setMarriage(map.get("MARRIAGE").toString());
		dataBean.setSaleCode(map.get("SALE_CODE").toString());
		dataBean.setrCode(map.get("R_CODE").toString());
		dataBean.setHgCardNo(map.get("HG_CARD_NO").toString());
	}

	/**
	 * make a SQL Syntax List
	 * 
	 * @param conn
	 * @return List of SQL Syntax
	 * @throws Exception
	 */
	public List<String> makeSqlList(Connection conn, HashMap<String, Integer> statusCntList, String fullFileName) throws Exception {
		
		sysTime = DateUtils.getSystemTime();
		sysTimeMs = new SimpleDateFormat("SSS").format(new GregorianCalendar().getTime());
		
		List<String> sqlList = new ArrayList<String>();
		// 0:新卡, 1:續卡, 2:換卡, 要做卡片狀態(TB_CARD)的更新
		if (!"3".equals(dataBean.getStatus())){
			sqlList.addAll(this.makeTbCardSQL(conn, fullFileName));
			
			//key ==> 專案代號 + 卡片狀態
			String key = dataBean.getSaleCode() + dataBean.getStatus();
			if(statusCntList.get(key) == null){
				statusCntList.put(key, 1);
			}
			else{
				statusCntList.put(key, statusCntList.get(key)+1);
			}
		}
		// 3:個資更新, 只處理TB_CUST
		sqlList.addAll(this.makeTbCustSQL(conn));
		return sqlList;
	}

	/**
	 * make a SQL Syntax List
	 * 
	 * @param conn
	 * @return List of SQL Syntax
	 * @throws Exception
	 */
	private List<String> makeTbCardSQL(Connection conn,  String fullFileName) throws Exception {
		List<String> sqlList = new ArrayList<String>();
		TbCardInfo info = new TbCardInfo();
		TbCardMgr mgr = new TbCardMgr(conn);
		Vector<TbCardInfo> result = new Vector<TbCardInfo>();
		String where = "CARD_NO = "
				+ StringUtil.toSqlValueWithSQuote(dataBean.getCardNo()) + " ";
		int cnt = mgr.queryMultiple(where, result);
		if (cnt > 0 && result.size() > 0) {
			info = result.get(0);
			info.setPrimaryCard(dataBean.getStatus());
			//20161013 TB_CARD.ISSUE_DATE時應填入欄位21(MBR_REG_DATE)
			//info.setIssueDate(dataBean.getIssueDate());
			//20170316 TB_CARD.ISSUE_DATE改回SYSDATE
			info.setIssueDate(sysDate);
			info.setCustId(dataBean.getCustId());
			if ("1".equals(_is_expiry_date_flag)) {
				info.setExpiryDate(this.formatExpiryDate(dataBean.getExpiryDate()));
			}
			info.setCreditExpiryDate(this.formatExpiryDate(dataBean
					.getExpiryDate()));
			info.setHgCardNo(dataBean.getHgCardNo());
			info.setSaleCode(dataBean.getSaleCode());
			
			StringBuffer cardSql = new StringBuffer();
			cardSql.append(" UPDATE TB_CARD SET ");
			cardSql.append(" PRIMARY_CARD = ").append(StringUtil.toSqlValueWithSQuote(dataBean.getStatus())).append(",");
			cardSql.append(" ISSUE_DATE = ").append(StringUtil.toSqlValueWithSQuote(sysDate)).append(",");
			cardSql.append(" MBR_REG_DATE = ").append(StringUtil.toSqlValueWithSQuote(batchDate)).append(",");
			cardSql.append(" CUST_ID = ").append(StringUtil.toSqlValueWithSQuote(dataBean.getCustId())).append(",");
			cardSql.append(" SALE_CODE = ").append(StringUtil.toSqlValueWithSQuote(dataBean.getSaleCode())).append(",");

			if ("1".equals(_is_expiry_date_flag)) {
				cardSql.append(" EXPIRY_DATE = ").append(this.formatExpiryDate(dataBean.getExpiryDate())).append(",");
			}
			
			cardSql.append(" HG_CARD_NO = ").append(StringUtil.toSqlValueWithSQuote(dataBean.getHgCardNo())).append(",");
			cardSql.append(" CREDIT_EXPIRY_DATE = ").append(StringUtil.toSqlValueWithSQuote(this.formatExpiryDate(dataBean.getExpiryDate()))).append(",");
			cardSql.append(" UPT_USERID = ").append(StringUtil.toSqlValueWithSQuote("BATCH")).append(",");
			cardSql.append(" UPT_DATE = ").append(StringUtil.toSqlValueWithSQuote(sysDate)).append(",");
			cardSql.append(" UPT_TIME = ").append(StringUtil.toSqlValueWithSQuote(sysTime)).append(",");
			cardSql.append(" APRV_USERID = ").append(StringUtil.toSqlValueWithSQuote("BATCH")).append(",");
			cardSql.append(" APRV_DATE = ").append(StringUtil.toSqlValueWithSQuote(sysDate)).append(",");
			cardSql.append(" APRV_TIME = ").append(StringUtil.toSqlValueWithSQuote(sysTime));
			
			cardSql.append(" WHERE CARD_NO = ").append(StringUtil.toSqlValueWithSQuote(dataBean.getCardNo()));
			
			sqlList.add(cardSql.toString());
			sqlList.add(this.makeTbCardUptInsertSQL(info));
			//20161219 insert TbHgCardMap
			if (!StringUtil.isEmpty(dataBean.getHgCardNo())){
				sqlList.add(this.makeTbHgCardMapInsertSQL(info, fullFileName));
			}
			
		}
		return sqlList;
	}

	/**
	 * make a table insert SQL Syntax
	 * 
	 * @param info
	 *            TbCardInfo
	 * @return SQL Syntax
	 * @throws Exception
	 */
	private String makeTbCardUptInsertSQL(TbCardInfo info) throws Exception {
		TbCardUptInfo upt = new TbCardUptInfo();
		upt.setRegionId(info.getRegionId());
		upt.setMemId(info.getMemId());
		upt.setCustId(info.getCustId());
		upt.setCardProduct(info.getCardProduct());
		upt.setCardNo(info.getCardNo());
		upt.setExpiryDate(info.getExpiryDate());
		upt.setPrimaryCard(info.getPrimaryCard());
		upt.setStatus(info.getStatus());
		upt.setKeyVersion(info.getKeyVersion());
		upt.setBalTransferFlag(info.getBalTransferFlag());
		upt.setPersoBatchNo(info.getPersoBatchNo());
		upt.setPreloadAmt(info.getPreloadAmt());
		upt.setCardFee(info.getCardFee());
		upt.setPreviousStatus(info.getPreviousStatus());
		upt.setLastYearCnsAmt(info.getLastYearCnsAmt());
		upt.setTotalReloadAmt(info.getTotalReloadAmt());
		upt.setTotalUseAmt(info.getTotalUseAmt());
		upt.setCardTypeId(info.getCardTypeId());
		upt.setCardCatId(info.getCardCatId());
		upt.setTestFlag(info.getTestFlag());
		upt.setHgCardNo(info.getHgCardNo());
		upt.setCreditExpiryDate(info.getCreditExpiryDate());
		upt.setSaleCode(info.getSaleCode());
		upt.setIssueDate(info.getIssueDate());
		upt.setMbrRegDate(batchDate);
		upt.setUptStatus("2");
		upt.setAprvStatus("1");
		upt.setUptUserid("BATCH");
		upt.setUptDate(sysDate);
		upt.setUptTime(sysTime+sysTimeMs);
		upt.setAprvUserid("BATCH");
		upt.setAprvDate(sysDate);
		upt.setAprvTime(sysTime);
		return upt.toInsertSQL();
	}

	/**
	 * make a table insert SQL Syntax
	 * 
	 * @param info
	 *            TbCardInfo
	 * @return SQL Syntax
	 * @throws Exception
	 */
	private String makeTbHgCardMapInsertSQL(TbCardInfo info, String fullFileName) throws Exception {
		TbHgCardMapInfo mapInfo = new TbHgCardMapInfo();
		mapInfo.setCardNo(info.getCardNo());
		mapInfo.setBarcode1(info.getHgCardNo());
		mapInfo.setImpFileName(fullFileName);
		mapInfo.setImpFileDate(batchDate);
		mapInfo.setStatus("2");

		return mapInfo.toInsertSQL();
	}

	/**
	 * make a SQL Syntax List
	 * 
	 * @param conn
	 * @return List of SQL Syntax
	 * @throws Exception
	 */
	private List<String> makeTbCustSQL(Connection conn) throws Exception {
		List<String> sqlList = new ArrayList<String>();
		Vector<TbCustInfo> result = new Vector<TbCustInfo>();
		TbCustInfo info = new TbCustInfo();
		info.setCustId(dataBean.getCustId());
		int cnt = new TbCustMgr(conn).queryMultiple(info, result);
		if (cnt > 0 & result.size() > 0) {
			info = result.get(0);
			sqlList.add(this.makeTbCustInfo(info).toUpdateSQL());
		} else {
			info = new TbCustInfo();
			info.setRegionId("TWN");
			sqlList.add(this.makeTbCustInfo(info).toInsertSQL());
		}
		sqlList.add(this.makeTbCustUptInsertSQL(info));
		return sqlList;
	}

	/**
	 * make a TbCustInfo
	 * 
	 * @param info
	 *            TbCustInfo
	 * @return TbCustInfo
	 */
	private TbCustInfo makeTbCustInfo(TbCustInfo info) {
		info.setCustId(dataBean.getCustId());
		info.setCity(dataBean.getCity());
		info.setDmFlag(dataBean.getDmFlag());
		info.setVipFlag(dataBean.getVipFlag());
		info.setMbrRegDate(batchDate);
		info.setMerchId(dataBean.getMerchId());
		info.setMarriage(dataBean.getMarriage());
		info.setSaleCode(dataBean.getSaleCode());
		info.setLocName(dataBean.getLocName());
		info.setPersonId(dataBean.getPersonId());
		info.setGender(dataBean.getGender());
		info.setBirthday(dataBean.getBirthday());
		info.setTelHome(dataBean.getTelHome());
		info.setMobile(dataBean.getMobile());
		info.setEmail(dataBean.getEmail());
		info.setZipCode(dataBean.getZipCode());
		info.setAddress(dataBean.getAddress());
		info.setLegalAgentName(dataBean.getLegalAgentName());
		info.setLegalAgentPid(dataBean.getLegalAgentPid());
		info.setLegalAgentMobile(dataBean.getLegalAgentMobile());
		info.setLegalAgentPhone(dataBean.getLegalAgentPhone());
		info.setSyncFlag("0");
		info.setUptUserid("BATCH");
		info.setUptDate(sysDate);
		info.setUptTime(sysTime);
		info.setAprvUserid("BATCH");
		info.setAprvDate(sysDate);
		info.setAprvTime(sysTime);

		if ("1".equals(_is_cust_encript)) {
			try {
				info.setLocName(BatchUtils.encript(dataBean.getLocName()));
				info.setPersonId(BatchUtils.encript(dataBean.getPersonId()));
				info.setGender(BatchUtils.encript(dataBean.getGender()));
				info.setBirthday(BatchUtils.encript(dataBean.getBirthday()));
				info.setTelHome(BatchUtils.encript(dataBean.getTelHome()));
				info.setMobile(BatchUtils.encript(dataBean.getMobile()));
				info.setEmail(BatchUtils.encript(dataBean.getEmail()));
				info.setZipCode(BatchUtils.encript(dataBean.getZipCode()));
				info.setAddress(BatchUtils.encript(dataBean.getAddress()));
				info.setLegalAgentName(BatchUtils.encript(dataBean.getLegalAgentName()));
				info.setLegalAgentPid(BatchUtils.encript(dataBean.getLegalAgentPid()));
				info.setLegalAgentMobile(BatchUtils.encript(dataBean.getLegalAgentMobile()));
				info.setLegalAgentPhone(BatchUtils.encript(dataBean.getLegalAgentPhone()));
			} catch (Exception ignore) {
				log.warn("encript fail : " + ignore.getMessage());
			}
		}
		return info;
	}

	/**
	 * make a table insert SQL Syntax
	 * 
	 * @param info
	 *            TbCustInfo
	 * @returnSQL Syntax
	 */
	private String makeTbCustUptInsertSQL(TbCustInfo info) {
		TbCustUptInfo upt = new TbCustUptInfo();
		upt.setRegionId(info.getRegionId());
		upt.setCustId(dataBean.getCustId());
		upt.setLocName(dataBean.getLocName());
		upt.setPersonId(dataBean.getPersonId());
		upt.setGender(dataBean.getGender());
		upt.setBirthday(dataBean.getBirthday());
		upt.setCity(dataBean.getCity());
		upt.setZipCode(dataBean.getZipCode());
		upt.setAddress(dataBean.getAddress());
		upt.setTelHome(dataBean.getTelHome());
		upt.setMobile(dataBean.getMobile());
		upt.setEmail(dataBean.getEmail());
		upt.setDmFlag(dataBean.getDmFlag());
		upt.setLegalAgentName(dataBean.getLegalAgentName());
		upt.setLegalAgentPid(dataBean.getLegalAgentPid());
		upt.setLegalAgentMobile(dataBean.getLegalAgentMobile());
		upt.setLegalAgentPhone(dataBean.getLegalAgentPhone());
		upt.setVipFlag(dataBean.getVipFlag());
		upt.setMbrRegDate(batchDate);
		upt.setMerchId(dataBean.getMerchId());
		upt.setMarriage(dataBean.getMarriage());
		upt.setSaleCode(dataBean.getSaleCode());
		upt.setSyncFlag("0");
		upt.setUptStatus("2");
		upt.setAprvStatus("1");
		upt.setUptUserid("BATCH");
		upt.setUptDate(sysDate);
		upt.setUptTime(sysTime+sysTimeMs);
		upt.setAprvUserid("BATCH");
		upt.setAprvDate(sysDate);
		upt.setAprvTime(sysTime);
		upt.setModifyDesc(formatModifyDesc(dataBean.getStatus()));
		upt.setModifySource("BATCH");

		if ("1".equals(_is_cust_encript)) {
			try {
				upt.setLocName(BatchUtils.encript(dataBean.getLocName()));
				upt.setPersonId(BatchUtils.encript(dataBean.getPersonId()));
				upt.setGender(BatchUtils.encript(dataBean.getGender()));
				upt.setBirthday(BatchUtils.encript(dataBean.getBirthday()));
				upt.setTelHome(BatchUtils.encript(dataBean.getTelHome()));
				upt.setMobile(BatchUtils.encript(dataBean.getMobile()));
				upt.setEmail(BatchUtils.encript(dataBean.getEmail()));
				upt.setZipCode(BatchUtils.encript(dataBean.getZipCode()));
				upt.setAddress(BatchUtils.encript(dataBean.getAddress()));
				upt.setLegalAgentName(BatchUtils.encript(dataBean.getLegalAgentName()));
				upt.setLegalAgentPid(BatchUtils.encript(dataBean.getLegalAgentPid()));
				upt.setLegalAgentMobile(BatchUtils.encript(dataBean.getLegalAgentMobile()));
				upt.setLegalAgentPhone(BatchUtils.encript(dataBean.getLegalAgentPhone()));
			} catch (Exception ignore) {
				log.warn("encript fail : " + ignore.getMessage());
			}
		}
		return upt.toInsertSQL();
	}

	/**
	 * Retrieves the value from TB_SYS_CONFIG
	 * 
	 * @param conn
	 * @param parm
	 * @return TB_SYS_CONFIG.VALUE
	 * @throws Exception
	 */
	private String getSysConfigValue(Connection conn, String parm)
			throws Exception {
		Vector<TbSysConfigInfo> result = new Vector<TbSysConfigInfo>();
		TbSysConfigInfo info = new TbSysConfigInfo();
		info.setParm(parm);
		int cnt = new TbSysConfigMgr(conn).queryMultiple(info, result);
		if (cnt > 0 && result.size() > 0)
			return result.get(0).getValue();
		return null;
	}

	/**
	 * Retrieves the maximum number of rows
	 * 
	 * @param conn
	 * @param cardNo
	 * @return Total record
	 * @throws Exception
	 */
	private Integer getTbCardCnt(Connection conn, String cardNo)
			throws Exception {
		Vector<TbCardInfo> result = new Vector<TbCardInfo>();
		TbCardInfo info = new TbCardInfo();
		info.setCardNo(cardNo);
		return new TbCardMgr(conn).queryMultiple(info, result);
	}

	/**
	 * Retrieves the value from TB_MEMER
	 * 
	 * @param conn
	 * @param cardNo
	 * @return
	 * @throws Exception
	 */
	private String getExpiryDateFlag(Connection conn, String cardNo)
			throws Exception {
		String sqlCmd = "SELECT BMEM_EXPIRY_DATE_FLAG FROM TB_MEMBER "
				+ "WHERE BANK_ID IN "
				+ "(SELECT BANK_ID FROM TB_CARD WHERE CARD_NO = "
				+ StringUtil.toSqlValueWithSQuote(cardNo) + ") ";
		return DbUtil.getString(sqlCmd, conn);
	}

	/**
	 * Retrieves the value from TB_CUST or create a new customer id
	 * 
	 * @param conn
	 * @param personId
	 * @return custId
	 * @throws Exception
	 */
	private String getCustId(Connection conn, String personId) throws Exception {
		Vector<TbCustInfo> result = new Vector<TbCustInfo>();
		TbCustMgr mgr = new TbCustMgr(conn);
		TbCustInfo info = new TbCustInfo();
		if ("1".equals(_is_cust_encript))
			info.setPersonId(BatchUtils.encript(personId));
		else
			info.setPersonId(personId);
		int cnt = mgr.queryMultiple(info, result);
		if (cnt > 0 && result.size() > 0)
			return result.get(0).getCustId();
		else
			return this.createCustId(conn);
	}

	/**
	 * create a new customer id
	 * 
	 * @param conn
	 * @return I + YYY(3碼) + DDD(3碼) + SEQ_NO(6碼)
	 * @throws Exception
	 */
	private String createCustId(Connection conn) throws Exception {
		String result = null;
		Calendar cal = Calendar.getInstance();
		cal.setTime(new SimpleDateFormat("yyyyMMdd").parse(sysDate));
		String year = String.valueOf(cal.get(Calendar.YEAR)).substring(1, 4);
		String dayOfYear = String.valueOf(cal.get(Calendar.DAY_OF_YEAR));
		String seqno = "";
		Statement stmt = null;
		ResultSet rs = null;
		String sql = "select to_char(SEQ_CUST_ID.nextval,'000000') from DUAL ";
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				seqno = rs.getString(1).trim();
				break;
			}
		} catch (SQLException ignore) {
			log.warn("SQLException:" + ignore.getMessage(), ignore);
			seqno = "";
		} finally {
			ReleaseResource.releaseDB(null, stmt, rs);
		}
		result = "I" + StringUtils.leftPad(year, 3, "0")
				+ StringUtils.leftPad(dayOfYear, 3, "0")
				+ StringUtils.leftPad(seqno, 6, "0");
		return result;
	}

	/**
	 * Returns a new string that is a string of given value
	 * 
	 * @param value
	 * @return the specified string
	 */
	private String formatModifyDesc(String value) {
		if (value == null)
			return "";
		if ("0".equals(value))
			return "新卡";
		if ("1".equals(value))
			return "續卡";
		if ("2".equals(value))
			return "換卡";
		if ("3".equals(value))
			return "個資更新";
		return value;
	}

	/**
	 * Returns a new string that is a substring of given value
	 * 
	 * @param value
	 *            zip code
	 * @return the specified substring
	 * @throws Exception
	 */
	private String formatZipCode(String value) throws Exception {
		if (value.length() < 5)
			return value;
		return value.substring(2, 5);
	}

	/**
	 * Format to AD date
	 * 
	 * @param date
	 *            (yyMM)
	 * @return date(yyyyMMdd)
	 * @throws Exception 
	 */
	private String formatExpiryDate(String date) throws Exception {
		if (date.length() != 4)
			return null;
		
		String yearMonth = "20" + date;
		String lastDay = StringUtils.leftPad(String.valueOf(DateUtil.getLastDayOfMonth(yearMonth+"01")), 2, '0');
		return yearMonth + lastDay;
		
//		String yy = date.substring(0, 2);
//		String mm = date.substring(2, 4);
//		int year;
//		int month;
//		int day;
//		try {
//			year = Integer.valueOf(yy) + 2000;
//			month = Integer.valueOf(mm);
//		} catch (NumberFormatException e) {
//			log.warn("year is '" + yy + "', month is '" + mm + "'");
//			return null;
//		}
//		Calendar cal = Calendar.getInstance();
//		cal.set(Calendar.YEAR, year);
//		cal.set(Calendar.MONTH, (month - 1));
//		day = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
//		return String.valueOf(year) + mm
//				+ StringUtils.leftPad(String.valueOf(day), 2, '0');
	}
}
