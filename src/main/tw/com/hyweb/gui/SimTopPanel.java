/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimTopPanel.java
 *
 * Created on 2010/6/17, 下午 06:19:20
 */
package tw.com.hyweb.gui;

import java.awt.Component;
import java.awt.FontMetrics;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.apache.commons.jexl2.Expression;
import org.apache.commons.jexl2.JexlContext;
import org.apache.commons.jexl2.JexlEngine;
import org.apache.commons.jexl2.MapContext;

import org.jpos.iso.ISOComponent;
import org.jpos.iso.ISOException;
import org.jpos.iso.ISOFieldPackager;
import org.jpos.iso.packager.XMLPackager;
import tw.com.hyweb.iso.GenericPackager;
import tw.com.hyweb.online.Context;
import tw.com.hyweb.online.DefMain;
import tw.com.hyweb.util.ISOUtil;

/**
 * 
 * @author SamSon
 */
public class SimTopPanel extends javax.swing.JPanel
{
    public static int TBL_ISONUM = 0;
    public static int TBL_NAME = 1;
    public static int TBL_VALUE = 2;
    public static int TBL_FN = 3;
    public static int TBL_TYPE = 4;
    public static int TBL_LEN = 5;
    public static int TBL_VARLEN = 6;
    private File cfgDir = null;
    private DefMainGui defMainGui=null;
    private JexlEngine jexl = new JexlEngine();
    private JexlContext jc = new MapContext();

    /** Creates new form SimTopPanel*/
    public SimTopPanel(DefMainGui defMainGui)
    {
        this.defMainGui = defMainGui;
        jc.set("fn", new InputFn());
        
        initComponents();
    }

    private void fillISOMsg(Context ctx)
    {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int cnt = model.getRowCount();
        for (int i = 0; i < cnt; i++)
        {
            String type = (String) model.getValueAt(i, TBL_TYPE);
            String value = (String) model.getValueAt(i, TBL_VALUE);
            if (value != null && model.getValueAt(i, TBL_FN) != null)
            {
                String fn = (String) model.getValueAt(i, TBL_FN);
                int idxb = fn.indexOf("{");
                int idxe = fn.indexOf("}");
                if (idxb >= 0 && idxe >= 0)
                {
                    fn = fn.substring(idxb + 1, idxe);
                    Expression e = jexl.createExpression(fn);
                    value = (String) e.evaluate(jc);
                }
            }
            if (value != null && value.length() > 0)
            {
                int num = (Integer) model.getValueAt(i, TBL_ISONUM);
                if (type.equals("A") || type.equals("N"))
                {
                    ctx.set(num, value);
                    ctx.getIsoMsg().set(num, value);
                }
                else
                {
                    ctx.getIsoMsg().set(num, ISOUtil.hex2byte(value));
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        labelCfgDir = new javax.swing.JLabel();
        tfCfgDir = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnShowTmp = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taResult = new javax.swing.JTextArea();
        btnShowData = new javax.swing.JButton();
        btnShowRaw = new javax.swing.JButton();

        labelCfgDir.setText("Config Dir");

        tfCfgDir.setEditable(false);

        btnChoose.setText("choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Name", "Value", "Function", "Type", "Len", "Var"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(2).setMinWidth(20);

        btnShowTmp.setText("Show Template");
        btnShowTmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTmpActionPerformed(evt);
            }
        });

        taResult.setColumns(20);
        taResult.setRows(5);
        jScrollPane2.setViewportView(taResult);

        btnShowData.setText("Show Data");
        btnShowData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDataActionPerformed(evt);
            }
        });

        btnShowRaw.setText("Show Raw");
        btnShowRaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRawActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.CENTER, layout.createSequentialGroup()
                        .add(btnShowTmp)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 262, Short.MAX_VALUE)
                        .add(btnShowData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.CENTER, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.CENTER, btnShowRaw)
                    .add(layout.createSequentialGroup()
                        .add(labelCfgDir)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(tfCfgDir, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnChoose, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelCfgDir)
                    .add(tfCfgDir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnChoose))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnShowTmp)
                    .add(btnShowData)
                    .add(btnShowRaw))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String dir = System.getProperty("user.dir") + File.separatorChar + "config";
        File f = new File(dir);
        jFileChooser1.setCurrentDirectory(f);
        int result = jFileChooser1.showOpenDialog(this);
        cfgDir = jFileChooser1.getSelectedFile();
        if (result == JFileChooser.APPROVE_OPTION)
        {
            tfCfgDir.setText(cfgDir.getPath());
            showCfg();
        }
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnShowTmpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnShowTmpActionPerformed
    {//GEN-HEADEREND:event_btnShowTmpActionPerformed
        try
        {
            XMLPackager pkger = new XMLPackager();
            Context ctx = new Context();
            ctx.getIsoMsg().setPackager(pkger);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int cnt = model.getRowCount();
            for (int i = 0; i < cnt; i++)
            {
                String type = (String) model.getValueAt(i, TBL_TYPE);
                Object value = model.getValueAt(i, TBL_VALUE);
                if (value != null && ((String) value).length() > 0)
                {
                    int num = (Integer) model.getValueAt(i, TBL_ISONUM);
                    if (type.equals("A") || type.equals("N"))
                    {
                        ctx.set(num, (String) value);
                        ctx.getIsoMsg().set(num, (String) value);
                    }
                    else
                    {
                        ctx.getIsoMsg().set(num, ISOUtil.hex2byte((String) value));
                    }
                }
            }

            String resultPack = new String(ctx.getIsoMsg().pack());
            taResult.setText(resultPack);
            
        }
        catch (ISOException ex)
        {
            Logger.getLogger(SimTopPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnShowTmpActionPerformed

    private void btnShowDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnShowDataActionPerformed
    {//GEN-HEADEREND:event_btnShowDataActionPerformed
        try
        {
            XMLPackager pkger = new XMLPackager();
            Context ctx = new Context();
            ctx.getIsoMsg().setPackager(pkger);

            fillISOMsg(ctx);

            String resultPack = new String(ctx.getIsoMsg().pack());
            taResult.setText(resultPack);

        }
        catch (ISOException ex)
        {
            Logger.getLogger(SimTopPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnShowDataActionPerformed

    private void btnShowRawActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnShowRawActionPerformed
    {//GEN-HEADEREND:event_btnShowRawActionPerformed
        try
        {
            String isocfg = cfgDir.getPath() + File.separatorChar + "isoconfig.xml";
            GenericPackager gp = new GenericPackager(isocfg);
            Context ctx = new Context();
            ctx.getIsoMsg().setPackager(gp);

            fillISOMsg(ctx);

            String resultPack = ISOUtil.hexString(ctx.getIsoMsg().pack());
            taResult.setText(resultPack);
        }
        catch (ISOException ex)
        {
            Logger.getLogger(SimTopPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnShowRawActionPerformed

    private void showCfg()
    {
        try
        {
            String ipcfg = cfgDir.getPath() + File.separatorChar + "ip.properties";
            FileInputStream ipcfgfis = new FileInputStream(ipcfg);
            Properties prop = new Properties();
            prop.load(ipcfgfis);

            //String strip = prop.getProperty("ip");
            //String strport = prop.getProperty("port");
            String isocfg = cfgDir.getPath() + File.separatorChar + "isoconfig.xml";
            GenericPackager gp = new GenericPackager(isocfg);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            ISOFieldPackager fp = null;
            String fname = null;
            int flen = 0;
            String ftype = null;
            String type = "O";
            boolean isVarLen = false;
            ISOComponent isom = null;
            try
            {
                for (int i = 0; i < 128; i++)
                {
                    if (i == 1)
                    {
                        continue;
                    }
                    fp = gp.getFieldPackager(i);
                    if (fp != null)
                    {
                        fname = fp.getDescription();
                        flen = fp.getLength();
                        ftype = fp.getClass().getSimpleName();
                        isVarLen = ftype.indexOf("_L") > 0;
                        if (ftype.indexOf("BINARY") > 0)
                        {
                            type = "B";
                        }
                        else if (ftype.indexOf("CHAR") > 0)
                        {
                            type = "A";
                        }
                        else if (ftype.indexOf("NUM") > 0)
                        {
                            type = "N";
                        }
                        else
                        {
                            isom = fp.createComponent(i);
                            if (isom instanceof org.jpos.iso.ISOField)
                            {
                                type = "A";
                            }
                            else if (isom instanceof org.jpos.iso.ISOBinaryField)
                            {
                                type = "B";
                            }
                            else if (isom instanceof org.jpos.iso.ISOMsg)
                            {
                                type = "O";
                            }
                            else if (isom instanceof org.jpos.iso.ISOBitMap)
                            {
                                type = "O";
                                continue;
                            }
                        }
                        model.addRow(new Object[]
                            {
                                i, fname, null, null, type, flen, isVarLen
                            });
                    }
                }
            }
            catch (Exception e)
            {//cannot know bitmap size will cause array index out of range
                System.err.println(e);
            }

            Insets s = new Insets(0, 0, 0, 0);
            setColumnWidths(jTable1, s, false, false);
            jTable1.getColumnModel().getColumn(TBL_VALUE).setCellEditor(new ISOFieldEditor(jTable1));
            jTable1.getColumnModel().getColumn(TBL_FN).setCellEditor(new FnEditor(jTable1));
//        model.fireTableDataChanged();

        }
        catch (Exception ioe)
        {
            ioe.printStackTrace();
        }
    }

    private void startSim()
    {
        if (cfgDir != null)
        {
            DefMain.main(new String[]
                {
                    cfgDir.getName()
                });
        }
    }

    public int calculateColumnWidth(JTable table, int columnIndex)
    {
        //Get the column name of the given column.
        String value = table.getColumnName(columnIndex);
        //Calculate the width required for the column.
        FontMetrics metrics = getGraphics().getFontMetrics();
        int width = metrics.stringWidth(value) + (2 * table.getColumnModel().getColumnMargin());

        //int width = 0;      // The return value
        int rowCount = table.getRowCount();
        for (int i = 0; i < rowCount; i++)
        {
            TableCellRenderer renderer = table.getCellRenderer(i, columnIndex);
            Component comp = renderer.getTableCellRendererComponent(
                table, table.getValueAt(i, columnIndex),
                false, false, i, columnIndex);
            int thisWidth = comp.getPreferredSize().width;
            if (thisWidth > width)
            {
                width = thisWidth;
            }
        }
        return width;
    }

// Set the widths of every column in a table
    public void setColumnWidths(JTable table, Insets insets, boolean setMinimum, boolean setMaximum)
    {
        int columnCount = table.getColumnCount();
        for (int i = 0; i < columnCount; i++)
        {
            setColumnWidths(table,insets,setMinimum,setMaximum,i);
        }
    }

    public void setColumnWidths(JTable table, Insets insets, boolean setMinimum, boolean setMaximum,int colIdx)
    {
        TableColumnModel tcm = table.getColumnModel();
        int spare = (insets == null ? 0 : insets.left + insets.right);
        int width = calculateColumnWidth(table, colIdx);
        width += spare;
        TableColumn column = tcm.getColumn(colIdx);
        column.setPreferredWidth(width + 1);
        if (setMinimum == true)
        {
            column.setMinWidth(width);
        }
        if (setMaximum == true)
        {
            column.setMaxWidth(width);
        }

    }

// Sort an array of integers in place
    public void sort(int[] values)
    {
        int length = values.length;
        if (length > 1)
        {
            for (int i = 0; i < length - 1; i++)
            {
                for (int j = i + 1; j < length; j++)
                {
                    if (values[j] < values[i])
                    {
                        int temp = values[i];
                        values[i] = values[j];
                        values[j] = temp;
                    }
                }
            }
        }
    }

    class FnEditor extends DefaultCellEditor implements ItemListener, ActionListener
    {

        JComboBox cbox;
        JTable tbl;
        Object[] items = new String[]
        {
            "",
            "${fn.genSequence(len)}",
            "${fn.genRandomNum(len)}",
            "${fn.genDateTime('yyyyMMddHHmmss')}",
            "#genTLV",
            "#genToken",
            "#genJSON",
        };

        public FnEditor(JTable table)
        {
            super(new JComboBox());
            cbox = (JComboBox) getComponent();
            for (int i = 0; i < items.length; i++)
            {
                cbox.addItem(items[i]);
            }
            cbox.setEditable(true);
            cbox.getEditor().addActionListener(this);
            cbox.addItemListener(this);

            tbl = table;
        }

        public void itemStateChanged(ItemEvent e)
        {
            if (e.getStateChange() == ItemEvent.SELECTED)
            {
                int row = tbl.getEditingRow();
                if (row >= 0)
                {
                    //String value = (String)tbl.getValueAt(row, TBL_VALUE);
                    String value = (String) e.getItem();
                    if (value.startsWith("#"))
                    {
                        inputFromDialog(value);
                    }
                    else
                    {
                        tbl.setValueAt(value, row, TBL_VALUE);
                    }
                    Insets s = new Insets(0, 0, 0, 0);
                    setColumnWidths(tbl, s, false, false,tbl.getEditingColumn());
                }
            }
        }

        public void actionPerformed(ActionEvent e)
        {
            int row = tbl.getEditingRow();
            if (row >= 0)
            {
                String value = (String) cbox.getEditor().getItem();
                if (value.startsWith("#"))
                {
                }
                else
                {
                    tbl.setValueAt(value, row, TBL_VALUE);
                }
                Insets s = new Insets(0, 0, 0, 0);
                setColumnWidths(tbl, s, false, false,tbl.getEditingColumn());
            }
        }
        
        private void inputFromDialog(String para)
        {
            String ret = "";
            System.out.println("input dialog:"+para);
            if (para.equals("#genTLV"))
            {
                JDialog genTLVDialog = new GenTLVDialog(tbl,defMainGui,true);
                genTLVDialog.pack();
                genTLVDialog.setVisible(true);
            }
            else if (para.equals("#genToken"))
            {
            }
            else if (para.equals("#genJSON"))
            {
            }
        }
    }

    class ISOFieldEditor extends DefaultCellEditor implements ActionListener
    {

        JTextField ftf;
        JTable tbl;

        public ISOFieldEditor(JTable table)
        {
            super(new JTextField());
            ftf = (JTextField) getComponent();
            ftf.addActionListener(this);
            tbl = table;
        }

        //Override to invoke setValue on the formatted text field.
        public Component getTableCellEditorComponent(JTable table,
            Object value, boolean isSelected,
            int row, int column)
        {
            JTextField ftf = (JTextField) super.getTableCellEditorComponent(
                table, value, isSelected, row, column);

            ftf.setText((String) value);
            return ftf;
        }

        //Override to check whether the edit is valid,
        //setting the value if it is and complaining if
        //it isn't.  If it's OK for the editor to go
        //away, we need to invoke the superclass's version
        //of this method so that everything gets cleaned up.
        public boolean stopCellEditing()
        {
            JTextField ftf = (JTextField) getComponent();
            int row = tbl.getEditingRow();
            String type = (String) tbl.getValueAt(row, TBL_TYPE);
            int len = (Integer) tbl.getValueAt(row, TBL_LEN);
            boolean isVarLen = (Boolean) tbl.getValueAt(row, TBL_VARLEN);
            String input = ftf.getText();
            if (input == null || input.length() <= 0)
            {
                return super.stopCellEditing();
            }
            if (type.equals("A") || type.equals("N"))
            {
                if (input.length() != len && !isVarLen)
                {
                    String msg = "input length must = " + len;
                    if (!showMessage(msg))
                    { //user wants to edit
                        return false; //don't let the editor go away
                    }
                }
            }
            else if (type.equals("B"))
            {
                if (input.length() != len * 2 && !isVarLen)
                {
                    String msg = "input length must = " + len;
                    if (!showMessage(msg))
                    { //user wants to edit
                        return false; //don't let the editor go away
                    }
                }
            }

            if (type.equals("N"))
            {
                if (!(ISOUtil.isNumeric(input)))
                {
                    String msg = "please input numeric value.";
                    if (!showMessage(msg))
                    { //user wants to edit
                        return false; //don't let the editor go away
                    }
                }
            }
            else if (type.equals("A"))
            {
                if (!(ISOUtil.isAlphaNumeric(input)))
                {
                    String msg = "please input alpha or numeric value.";
                    if (!showMessage(msg))
                    { //user wants to edit
                        return false; //don't let the editor go away
                    }
                }
            }
            else if (type.equals("B"))
            {
                boolean invalid = false;
                for (int i = 0; i < input.length(); i++)
                {
                    char ch = input.charAt(i);
                    if (ch == '0' || ch == '1' || ch == '2' || ch == '3' || ch == '4' || ch == '5'
                        || ch == '6' || ch == '7' || ch == '8' || ch == '9' || ch == 'a' || ch == 'A'
                        || ch == 'b' || ch == 'B' || ch == 'c' || ch == 'C' || ch == 'd' || ch == 'D'
                        || ch == 'e' || ch == 'E' || ch == 'f' || ch == 'F')
                    {
                        continue;
                    }
                    else
                    {
                        invalid = true;
                        break;
                    }
                }
                if (invalid)
                {
                    String msg = "please input alpha or numeric value.";
                    if (!showMessage(msg))
                    { //user wants to edit
                        return false; //don't let the editor go away
                    }
                }
            }

            Insets s = new Insets(0, 0, 0, 0);
            setColumnWidths(tbl, s, false, false,tbl.getEditingColumn());

            return super.stopCellEditing();
        }
        
        public void actionPerformed(ActionEvent e)
        {
            Insets s = new Insets(0, 0, 0, 0);
            setColumnWidths(tbl, s, false, false,tbl.getEditingColumn());
        }

        protected boolean showMessage(String message)
        {
            Toolkit.getDefaultToolkit().beep();
            ftf.selectAll();
            getComponent().requestFocus();
            JOptionPane.showMessageDialog(null, message, "Alert!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnShowData;
    private javax.swing.JButton btnShowRaw;
    private javax.swing.JButton btnShowTmp;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelCfgDir;
    private javax.swing.JTextArea taResult;
    private javax.swing.JTextField tfCfgDir;
    // End of variables declaration//GEN-END:variables
}
